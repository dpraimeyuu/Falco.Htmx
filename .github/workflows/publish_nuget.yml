# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: publish
on:
    workflow_dispatch: # Allow running the workflow manually from the GitHub UI
    release:
        types:
            - published    # Run the workflow when a new GitHub release is published

env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_NOLOGO: true
    NuGetDirectory: ${{ github.workspace}} /nuget

jobs:
    create_nuget:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

            # Install the .NET SDK indicated in the global.json file
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                    dotnet-version: '6.x.x'

            # Create the NuGet package in the folder from the environment variable NuGetDirectory
            - run: dotnet pack --configuration Release --output "${{ env.NuGetDirectory }}" -p:PackageVersion=$GITHUB_REF_NAME

            # Publish the NuGet package as an artifact, so they can be used in the following jobs
            - uses: actions/upload-artifact@v3
              with:
                  name: nuget
                  if-no-files-found: error
                  retention-days: 7
                  path: ${{ env.NuGetDirectory }}/*.nupkg

    deploy:
        if: github.event_name == 'release'
        runs-on: ubuntu-latest
        needs: [create_nuget]
        steps:
            # Download the NuGet package created in the previous job
            - uses: actions/download-artifact@v3
              with:
                  name: nuget
                  path: ${{ env.NuGetDirectory }}

            # Install the .NET SDK indicated in the global.json file
            - name: Setup .NET
              uses: actions/setup-dotnet@v3
              with:
                  dotnet-version: '6.x.x'

            # Publish all NuGet packages to NuGet.org
            # Use --skip-duplicate to prevent errors if a package with the same version already exists.
            # If you retry a failed workflow, already published packages will be skipped without error.
            - name: Run NuGet Push
              run: |
                  NUGET_DIRECTORY="${NUGetDirectory}"  # Adjust this to your variable name
                  NUGET_APIKEY="${NUGET_APIKEY}"        # Adjust this to your variable name

                  for file in $(find "$NUGET_DIRECTORY" -type f -name "*.nupkg"); do
                    dotnet nuget push "$file" --api-key "$NUGET_APIKEY" --source https://api.nuget.org/v3/index.json --skip-duplicate
                  done
              env:
                  NUGetDirectory: ${{ env.NUGET_DIRECTORY }}
                  NUGET_APIKEY: ${{ secrets.NUGET_APIKEY }}
